import { UserDataService, UserMockService, UserService } from './user/services';
import { HttpService, Service } from '@adsis-esoft/common/data-access';
import { Token, provider } from '@adsis-esoft/common/utilities';
import userTableRow from './user/user-table-row.element.html?raw';
import template from './app.element.html?raw';
import { swap, swapMany } from './core';
import { env } from '../envs/env';
import './app.element.scss';

/* @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @
 *
 * Inje√ß√£o de depend√™ncia / Invers√£o de controle
 *
 * √â aqui que a arquitetura da aplica√ß√£o come√ßa
 * a fazer diferen√ßa de verdade em refatora√ß√µes
 *
 * @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ */

const API_TOKEN = new Token('api.token');

/**
 * Ao adicionar um provider temos
 * A classe abstrata, que ser√° usada em toda aplica√ß√£o,
 * por√©m, ela n√£o implementa c√≥digo nenhum, trata-se
 * apenas de um simbolo usado, que quando solicitado
 * retorna quem realmente faz o trabalho de fato
 *
 * Neste caso, toda vez que eu solicitar API_TOKEN,
 * na verdade ele me entregar√° a string '/api'
 *
 * Tem tamb√©m um terceiro par√¢metro √© usado pra,
 * depend√™ncias ou seja, coisas que o provider
 * precisa em seu construtor, e neste caso
 * √© a URL da API que foi configurada aqui üëá
 * e utilizada logo mais abaixo
 */

// URL da API REST
provider.add(API_TOKEN, '/api');

/**
 * Neste caso, toda vez que eu solicitar Service,
 * na verdade ele me entregar√° o HttpService e,
 * HttpService precisa da url da api no construtor
 *
 * ```example
 * class HttpService<T> implements Service<T> {
 *                       üëá
 *   constructor(private api: string) {}
 * }
 * ```
 */
provider.add(Service, HttpService, [API_TOKEN]);

/**
 * Sem querer deixar as coisas mais complexas, mas
 * aqui √© apenas uma verifica√ß√£o pra checar se est√°
 * sendo executada em produ√ß√£o ou n√£o e ent√£o decidir
 * se usaremos uma classe que trabalha com dados fakes
 * ou realmente far√° uma requisi√ß√£o http pra API REST
 *
 * Fa√ßa um teste, remove a ! do env.production logo
 * ali abaixo, salve e veja a mudan√ßa na tela
 *                     aquiüëá */
const UserServiceConcrete = !env.production ? UserDataService : UserMockService;
provider.add(UserService, UserServiceConcrete, [Service]);

/**
 * E por fim, aqui pegamos quem realmente importa
 * o UserService, que n√£o implementa nada e na
 * verdade estou usando o UserDataService ou
 * UserMockService, que n√£o sabe se estamos usando
 * Http ou Socket ou seja l√° o que for, isso √©
 * responsabilidade do Service, os Services
 * espec√≠ficos de entidades s√≥ se preocupam em
 * solicitar os registros pra chegar at√© a tela
 */
const userService = provider.use(UserService);

/* -- ---- ---- ---- ---- ---- ---- ---- --- */

export class AppElement extends HTMLElement {
  public static observedAttributes = [];

  async connectedCallback() {
    let tmpl = swap(template, 'title', 'ADSis & ESoft');

    const data = await fetch('/api').then((res) => res.json());
    this.innerHTML = swap(tmpl, 'response', data.message);

    const usersEl = this.querySelector<HTMLElement>('#users')!;

    /**
     * Aqui fazemos o findAll() e temos nossos usu√°rios,
     * n√£o importa quais sejam e nem como chegam at√© aqui
     */
    userService.findAll().subscribe((users) => {
      usersEl.innerHTML = swap(usersEl.innerHTML, 'total', users.length);
      const usersCard = usersEl.querySelector<HTMLElement>('section');
      if (usersCard) usersCard.innerHTML += swapMany(userTableRow, users);
    });

    /**
     * Mas onde est√° a grande vantagem nisso?
     *
     * Imagine uma grande aplica√ß√£o que tem mais
     * de 200 classes de Services espalhadas por
     * mais de 1000 componentes e estes Services
     * est√£o usando Http direto em todas eles
     *
     * Caso haja necessidade de mudar de Http
     * pra outra forma de comunica√ß√£o, seria
     * necess√°rio mudar isso em todas as 200
     * classes e mais de 1000 componentes
     *
     * N√£o √© s√≥ trabalhoso, na maioria das vezes
     * a migra√ß√£o n√£o acontece pq isso faria toda
     * produ√ß√£o parar por conta de tamanha mudan√ßa
     *
     * E desta forma, bastaria fazer algo como isso
     *
     * ```example
     * Enquanto usar API REST use üëá
     * provider.add(Service, HttpService, [API_TOKEN]);
     *
     * Em migra√ß√£o pra Socket use üëá
     * provider.add(Service, SocketService, [API_TOKEN]);
     *
     * E pronto, todos os Services da aplica√ß√£o agora
     * receber√£o o SocketService no lugar do Service üòä
     * ```
     */
  }
}
customElements.define('adsis-esoft-root', AppElement);
